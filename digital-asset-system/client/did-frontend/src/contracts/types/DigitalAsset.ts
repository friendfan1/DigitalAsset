/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DigitalAsset {
  export type CertifierCommentStruct = {
    certifier: AddressLike;
    comment: string;
  };

  export type CertifierCommentStructOutput = [
    certifier: string,
    comment: string
  ] & { certifier: string; comment: string };

  export type CertifierHashCommentStruct = {
    certifier: AddressLike;
    commentHash: BytesLike;
  };

  export type CertifierHashCommentStructOutput = [
    certifier: string,
    commentHash: string
  ] & { certifier: string; commentHash: string };

  export type AssetMetadataStruct = {
    cid: string;
    contentHash: BytesLike;
    registrant: AddressLike;
    registrationDate: BigNumberish;
    isCertified: boolean;
    encryptedKey: string;
    version: BigNumberish;
  };

  export type AssetMetadataStructOutput = [
    cid: string,
    contentHash: string,
    registrant: string,
    registrationDate: bigint,
    isCertified: boolean,
    encryptedKey: string,
    version: bigint
  ] & {
    cid: string;
    contentHash: string;
    registrant: string;
    registrationDate: bigint;
    isCertified: boolean;
    encryptedKey: string;
    version: bigint;
  };

  export type CertificationStruct = {
    certifier: AddressLike;
    timestamp: BigNumberish;
    comment: string;
  };

  export type CertificationStructOutput = [
    certifier: string,
    timestamp: bigint,
    comment: string
  ] & { certifier: string; timestamp: bigint; comment: string };
}

export interface DigitalAssetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "burn"
      | "getApproved"
      | "isApprovedForAll"
      | "name"
      | "ownerOf"
      | "rbac"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "registerAsset"
      | "certifyAssetWithMultipleComments"
      | "certifyAsset"
      | "certifyAssetWithHashComments"
      | "updateMetadata"
      | "getAssetMetadata"
      | "getCertificationHistory"
      | "verifyIntegrity"
      | "supportsInterface"
      | "burnAsset"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "AssetBurned"
      | "AssetCertified"
      | "AssetRegistered"
      | "MetadataUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rbac", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [AddressLike, string, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "certifyAssetWithMultipleComments",
    values: [BigNumberish, DigitalAsset.CertifierCommentStruct[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "certifyAsset",
    values: [BigNumberish, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "certifyAssetWithHashComments",
    values: [
      BigNumberish,
      DigitalAsset.CertifierHashCommentStruct[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [BigNumberish, string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificationHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyIntegrity",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAsset",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rbac", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certifyAssetWithMultipleComments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certifyAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certifyAssetWithHashComments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificationHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyIntegrity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnAsset", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetBurnedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    burner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    burner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    burner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetCertifiedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    certifier: AddressLike,
    comment: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    certifier: string,
    comment: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    certifier: string;
    comment: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetRegisteredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    registrant: AddressLike,
    cid: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    registrant: string,
    cid: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    registrant: string;
    cid: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    newCid: string,
    newVersion: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    newCid: string,
    newVersion: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    newCid: string;
    newVersion: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DigitalAsset extends BaseContract {
  connect(runner?: ContractRunner | null): DigitalAsset;
  waitForDeployment(): Promise<this>;

  interface: DigitalAssetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * See {IERC721-approve}.
   */
  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * See {IERC721-balanceOf}.
   */
  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  /**
   * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
   */
  burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  /**
   * See {IERC721-getApproved}.
   */
  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  /**
   * See {IERC721-isApprovedForAll}.
   */
  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  /**
   * See {IERC721Metadata-name}.
   */
  name: TypedContractMethod<[], [string], "view">;

  /**
   * See {IERC721-ownerOf}.
   */
  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  rbac: TypedContractMethod<[], [string], "view">;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  /**
   * See {IERC721-setApprovalForAll}.
   */
  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  /**
   * See {IERC721Metadata-symbol}.
   */
  symbol: TypedContractMethod<[], [string], "view">;

  /**
   * See {IERC721Metadata-tokenURI}.
   */
  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  /**
   * See {IERC721-transferFrom}.
   */
  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * 注册新资产
   * @param cid IPFS内容标识符
   * @param contentHash 内容哈希
   * @param encryptedKey 加密密钥
   * @param signature 签名
   * @param to 接收者地址
   */
  registerAsset: TypedContractMethod<
    [
      to: AddressLike,
      cid: string,
      contentHash: BytesLike,
      encryptedKey: string,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  certifyAssetWithMultipleComments: TypedContractMethod<
    [
      tokenId: BigNumberish,
      certifierComments: DigitalAsset.CertifierCommentStruct[],
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  /**
   * 认证资产 - 原始方法，保留向后兼容性
   * @param comment 认证评论
   * @param signatures 认证人签名数组
   * @param tokenId 资产 ID
   */
  certifyAsset: TypedContractMethod<
    [tokenId: BigNumberish, comment: string, signatures: BytesLike[]],
    [void],
    "nonpayable"
  >;

  certifyAssetWithHashComments: TypedContractMethod<
    [
      tokenId: BigNumberish,
      certifierHashComments: DigitalAsset.CertifierHashCommentStruct[],
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  /**
   * 更新资产元数据
   * @param newCid 新的 CID
   * @param newHash 新的内容哈希
   * @param newKey 新的加密密钥
   * @param tokenId 资产 ID
   */
  updateMetadata: TypedContractMethod<
    [tokenId: BigNumberish, newCid: string, newHash: BytesLike, newKey: string],
    [void],
    "nonpayable"
  >;

  /**
   * 获取资产元数据
   * @param tokenId 资产 ID
   */
  getAssetMetadata: TypedContractMethod<
    [tokenId: BigNumberish],
    [DigitalAsset.AssetMetadataStructOutput],
    "view"
  >;

  /**
   * 获取认证历史
   * @param tokenId 资产 ID
   */
  getCertificationHistory: TypedContractMethod<
    [tokenId: BigNumberish],
    [DigitalAsset.CertificationStructOutput[]],
    "view"
  >;

  /**
   * 验证资产完整性
   * @param hash 内容哈希
   * @param tokenId 资产 ID
   */
  verifyIntegrity: TypedContractMethod<
    [tokenId: BigNumberish, hash: BytesLike],
    [boolean],
    "view"
  >;

  /**
   * 支持接口实现
   */
  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  /**
   * 销毁资产 - 仅限资产所有者或已授权地址
   * @param tokenId 要销毁的资产ID
   */
  burnAsset: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rbac"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAsset"
  ): TypedContractMethod<
    [
      to: AddressLike,
      cid: string,
      contentHash: BytesLike,
      encryptedKey: string,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "certifyAssetWithMultipleComments"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      certifierComments: DigitalAsset.CertifierCommentStruct[],
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "certifyAsset"
  ): TypedContractMethod<
    [tokenId: BigNumberish, comment: string, signatures: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "certifyAssetWithHashComments"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      certifierHashComments: DigitalAsset.CertifierHashCommentStruct[],
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newCid: string, newHash: BytesLike, newKey: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAssetMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [DigitalAsset.AssetMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCertificationHistory"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [DigitalAsset.CertificationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyIntegrity"
  ): TypedContractMethod<
    [tokenId: BigNumberish, hash: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "burnAsset"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "AssetBurned"
  ): TypedContractEvent<
    AssetBurnedEvent.InputTuple,
    AssetBurnedEvent.OutputTuple,
    AssetBurnedEvent.OutputObject
  >;
  getEvent(
    key: "AssetCertified"
  ): TypedContractEvent<
    AssetCertifiedEvent.InputTuple,
    AssetCertifiedEvent.OutputTuple,
    AssetCertifiedEvent.OutputObject
  >;
  getEvent(
    key: "AssetRegistered"
  ): TypedContractEvent<
    AssetRegisteredEvent.InputTuple,
    AssetRegisteredEvent.OutputTuple,
    AssetRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "AssetBurned(uint256,address,uint256)": TypedContractEvent<
      AssetBurnedEvent.InputTuple,
      AssetBurnedEvent.OutputTuple,
      AssetBurnedEvent.OutputObject
    >;
    AssetBurned: TypedContractEvent<
      AssetBurnedEvent.InputTuple,
      AssetBurnedEvent.OutputTuple,
      AssetBurnedEvent.OutputObject
    >;

    "AssetCertified(uint256,address,string,uint256)": TypedContractEvent<
      AssetCertifiedEvent.InputTuple,
      AssetCertifiedEvent.OutputTuple,
      AssetCertifiedEvent.OutputObject
    >;
    AssetCertified: TypedContractEvent<
      AssetCertifiedEvent.InputTuple,
      AssetCertifiedEvent.OutputTuple,
      AssetCertifiedEvent.OutputObject
    >;

    "AssetRegistered(uint256,address,string,uint256)": TypedContractEvent<
      AssetRegisteredEvent.InputTuple,
      AssetRegisteredEvent.OutputTuple,
      AssetRegisteredEvent.OutputObject
    >;
    AssetRegistered: TypedContractEvent<
      AssetRegisteredEvent.InputTuple,
      AssetRegisteredEvent.OutputTuple,
      AssetRegisteredEvent.OutputObject
    >;

    "MetadataUpdated(uint256,string,uint256,uint256)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
