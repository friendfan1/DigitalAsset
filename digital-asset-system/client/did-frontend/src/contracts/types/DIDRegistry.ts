/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DIDRegistry {
  export type ReputationChangeStruct = {
    operator: AddressLike;
    delta: BigNumberish;
    timestamp: BigNumberish;
    reason: string;
  };

  export type ReputationChangeStructOutput = [
    operator: string,
    delta: bigint,
    timestamp: bigint,
    reason: string
  ] & { operator: string; delta: bigint; timestamp: bigint; reason: string };
}

export interface DIDRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INITIAL_REPUTATION"
      | "MAX_REPUTATION"
      | "MIN_REPUTATION"
      | "STAKE_AMOUNT"
      | "dids"
      | "owner"
      | "renounceOwnership"
      | "reputationHistory"
      | "transferOwnership"
      | "isDIDActive"
      | "getDIDDetails"
      | "createDID"
      | "updateDID"
      | "withdrawStake"
      | "updateReputation"
      | "verifyDID"
      | "getReputationHistory"
      | "getDID"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DIDCreated"
      | "DIDDeactivated"
      | "DIDUpdated"
      | "OwnershipTransferred"
      | "ReputationUpdated"
      | "StakeWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "INITIAL_REPUTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REPUTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REPUTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dids", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDIDActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDIDDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDID",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getDID", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "INITIAL_REPUTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REPUTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REPUTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDIDActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDIDDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createDID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateDID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyDID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReputationHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDID", data: BytesLike): Result;
}

export namespace DIDCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    docHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, docHash: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    docHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDDeactivatedEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    newDocHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    newDocHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    newDocHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    newScore: BigNumberish,
    delta: BigNumberish,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    newScore: bigint,
    delta: bigint,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    newScore: bigint;
    delta: bigint;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeWithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DIDRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DIDRegistry;
  waitForDeployment(): Promise<this>;

  interface: DIDRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INITIAL_REPUTATION: TypedContractMethod<[], [bigint], "view">;

  MAX_REPUTATION: TypedContractMethod<[], [bigint], "view">;

  MIN_REPUTATION: TypedContractMethod<[], [bigint], "view">;

  STAKE_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  dids: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, boolean] & {
        owner: string;
        docHash: string;
        created: bigint;
        reputation: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  /**
   * Returns the address of the current owner.
   */
  owner: TypedContractMethod<[], [string], "view">;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputationHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        operator: string;
        delta: bigint;
        timestamp: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * 检查DID是否存在且激活
   * @param user 用户地址
   */
  isDIDActive: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  /**
   * 获取DID详细信息
   * @param user 用户地址
   */
  getDIDDetails: TypedContractMethod<
    [user: AddressLike],
    [
      [string, string, bigint, bigint, boolean] & {
        owner: string;
        docHash: string;
        created: bigint;
        reputation: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  /**
   * 创建DID
   * @param docHash 文档哈希
   */
  createDID: TypedContractMethod<[docHash: BytesLike], [void], "payable">;

  /**
   * 更新DID文档
   * @param newDocHash 新的文档哈希
   */
  updateDID: TypedContractMethod<[newDocHash: BytesLike], [void], "nonpayable">;

  /**
   * 提取质押金额
   */
  withdrawStake: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * 更新声誉值
   * @param delta 声誉变化值
   * @param reason 变更原因
   * @param user 目标用户
   */
  updateReputation: TypedContractMethod<
    [user: AddressLike, delta: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  /**
   * 验证DID文档
   * @param hash 文档哈希
   * @param user 用户地址
   */
  verifyDID: TypedContractMethod<
    [user: AddressLike, hash: BytesLike],
    [boolean],
    "view"
  >;

  /**
   * 获取声誉变更历史
   * @param user 用户地址
   */
  getReputationHistory: TypedContractMethod<
    [user: AddressLike],
    [DIDRegistry.ReputationChangeStructOutput[]],
    "view"
  >;

  /**
   * 获取DID
   * @param docHash 文档哈希
   */
  getDID: TypedContractMethod<[docHash: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INITIAL_REPUTATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REPUTATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_REPUTATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STAKE_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dids"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, boolean] & {
        owner: string;
        docHash: string;
        created: bigint;
        reputation: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputationHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        operator: string;
        delta: bigint;
        timestamp: bigint;
        reason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isDIDActive"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getDIDDetails"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [string, string, bigint, bigint, boolean] & {
        owner: string;
        docHash: string;
        created: bigint;
        reputation: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createDID"
  ): TypedContractMethod<[docHash: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "updateDID"
  ): TypedContractMethod<[newDocHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [user: AddressLike, delta: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyDID"
  ): TypedContractMethod<
    [user: AddressLike, hash: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReputationHistory"
  ): TypedContractMethod<
    [user: AddressLike],
    [DIDRegistry.ReputationChangeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDID"
  ): TypedContractMethod<[docHash: BytesLike], [string], "view">;

  getEvent(
    key: "DIDCreated"
  ): TypedContractEvent<
    DIDCreatedEvent.InputTuple,
    DIDCreatedEvent.OutputTuple,
    DIDCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DIDDeactivated"
  ): TypedContractEvent<
    DIDDeactivatedEvent.InputTuple,
    DIDDeactivatedEvent.OutputTuple,
    DIDDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "DIDUpdated"
  ): TypedContractEvent<
    DIDUpdatedEvent.InputTuple,
    DIDUpdatedEvent.OutputTuple,
    DIDUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StakeWithdrawn"
  ): TypedContractEvent<
    StakeWithdrawnEvent.InputTuple,
    StakeWithdrawnEvent.OutputTuple,
    StakeWithdrawnEvent.OutputObject
  >;

  filters: {
    "DIDCreated(address,bytes32,uint256)": TypedContractEvent<
      DIDCreatedEvent.InputTuple,
      DIDCreatedEvent.OutputTuple,
      DIDCreatedEvent.OutputObject
    >;
    DIDCreated: TypedContractEvent<
      DIDCreatedEvent.InputTuple,
      DIDCreatedEvent.OutputTuple,
      DIDCreatedEvent.OutputObject
    >;

    "DIDDeactivated(address,uint256)": TypedContractEvent<
      DIDDeactivatedEvent.InputTuple,
      DIDDeactivatedEvent.OutputTuple,
      DIDDeactivatedEvent.OutputObject
    >;
    DIDDeactivated: TypedContractEvent<
      DIDDeactivatedEvent.InputTuple,
      DIDDeactivatedEvent.OutputTuple,
      DIDDeactivatedEvent.OutputObject
    >;

    "DIDUpdated(address,bytes32,uint256)": TypedContractEvent<
      DIDUpdatedEvent.InputTuple,
      DIDUpdatedEvent.OutputTuple,
      DIDUpdatedEvent.OutputObject
    >;
    DIDUpdated: TypedContractEvent<
      DIDUpdatedEvent.InputTuple,
      DIDUpdatedEvent.OutputTuple,
      DIDUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReputationUpdated(address,uint256,int256,string,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "StakeWithdrawn(address,uint256,uint256)": TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;
    StakeWithdrawn: TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;
  };
}
